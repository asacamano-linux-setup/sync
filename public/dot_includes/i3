# i3 config file (v4) - Hacked by ascamano@gmail.com
#
# Please see https://i3wm.org/docs/userguide.html for a complete reference!

# Why so weird
#
# I use Chrome, Intellij, and tmux. Chome and intellij were both grabbing some of the standard
# Alt+<?> keystrokes, and also Ctrl+Atl+<?>.  And I'm used to tmux, with it's modal commands,
# so I moved most commands into an i3 mode.

set $mod Control+Mod1

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
font pango:monospace 8

# This font is widely installed, provides lots of unicode glyphs, right-to-left
# text rendering and scalability on retina/hidpi displays (thanks to pango).
#font pango:DejaVu Sans Mono 8

# The combination of xss-lock, nm-applet and pactl is a popular choice, so
# they are included here as an example. Modify as you see fit.

# xss-lock grabs a logind suspend inhibit lock and will use i3lock to lock the
# screen before suspend. Use loginctl lock-session to lock your screen.
exec --no-startup-id xss-lock --transfer-sleep-lock -- i3lock --nofork

# NetworkManager is the most popular way to manage wireless networks on Linux,
# and nm-applet is a desktop environment-independent system tray GUI for it.
# exec --no-startup-id nm-applet

# Use pactl to adjust volume in PulseAudio.
set $refresh_i3status killall -SIGUSR1 i3status
bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% && $refresh_i3status
bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% && $refresh_i3status
bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle && $refresh_i3status
bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle && $refresh_i3status

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

mode "act" {
	# start a terminal
	bindsym Return exec gnome-terminal ; mode "default"

	# kill focused window
	bindsym Shift+q kill ; mode "default"

	# start rofi (a program launcher)
	bindsym d exec --no-startup-id "rofi -demnu -show combi -combi-modi drun,window" ; mode "default"

	# change focused window
	bindsym Left focus left
	bindsym Down focus down
	bindsym Up focus up
	bindsym Right focus right

	# move the focused window
	bindsym Shift+Left move left
	bindsym Shift+Down move down
	bindsym Shift+Up move up
	bindsym Shift+Right move right

	# focus the parent container
	bindsym a focus parent

	# focus the child container
	bindsym d focus child

	# split in horizontal orientation
	bindsym h split h ; mode "default"

	# split in vertical orientation
	bindsym v split v ; mode "default"

	# enter fullscreen mode for the focused container
	bindsym f fullscreen toggle ; mode "default"

	# change container layout (stacked, tabbed, toggle split)
	bindsym s layout stacking ; mode "default"
	bindsym w layout tabbed ; mode "default"
	bindsym e layout toggle split ; mode "default"

	# toggle tiling / floating
	bindsym Shift+space floating toggle ; mode "default"

	# change focus between tiling / floating windows
	bindsym space focus mode_toggle ; mode "default"

	# Define names for default workspaces for which we configure key bindings later on.
	# We use variables to avoid repeating the names in multiple places.
	set $ws1 "1"
	set $ws2 "2"
	set $ws3 "3"
	set $ws4 "4"
	set $ws5 "5"
	set $ws6 "6"
	set $ws7 "7"
	set $ws8 "8"
	set $ws9 "9"
	set $ws10 "10"

	# switch to workspace
	bindsym 1 workspace number $ws1 ; mode "default"
	bindsym 2 workspace number $ws2 ; mode "default"
	bindsym 3 workspace number $ws3 ; mode "default"
	bindsym 4 workspace number $ws4 ; mode "default"
	bindsym 5 workspace number $ws5 ; mode "default"
	bindsym 6 workspace number $ws6 ; mode "default"
	bindsym 7 workspace number $ws7 ; mode "default"
	bindsym 8 workspace number $ws8 ; mode "default"
	bindsym 9 workspace number $ws9 ; mode "default"
	bindsym 0 workspace number $ws10 ; mode "default"

	# move focused container to workspace
	bindsym Shift+1 move container to workspace number $ws1 ; mode "default"
	bindsym Shift+2 move container to workspace number $ws2 ; mode "default"
	bindsym Shift+3 move container to workspace number $ws3 ; mode "default"
	bindsym Shift+4 move container to workspace number $ws4 ; mode "default"
	bindsym Shift+5 move container to workspace number $ws5 ; mode "default"
	bindsym Shift+6 move container to workspace number $ws6 ; mode "default"
	bindsym Shift+7 move container to workspace number $ws7 ; mode "default"
	bindsym Shift+8 move container to workspace number $ws8 ; mode "default"
	bindsym Shift+9 move container to workspace number $ws9 ; mode "default"
	bindsym Shift+0 move container to workspace number $ws10 ; mode "default"

	# reload the configuration file
	bindsym Shift+c reload ; mode "default"
	# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
	bindsym Shift+r restart ; mode "default"
	# exit i3 (logs you out of your X session)
	bindsym Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -B 'Yes, exit i3' 'i3-msg exit'" 

	# Enter resize mode
	bindsym r mode "resize"

        # back to normal: Escape
        bindsym Escape mode "default"
}
bindsym $mod+i mode "act"

	# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Escape or $mod+i
        bindsym Escape mode "default"
        bindsym $mod+i mode "default"
}


# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
bar {
        status_command i3status
}
